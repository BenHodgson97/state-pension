# Copyright 2017 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

appName=state-pension
appUrl = "http://"${appName}".service"

play.modules.enabled += "com.kenshoo.play.metrics.PlayModule"
play.http.requestHandler = "play.api.http.GlobalSettingsHttpRequestHandler"

# The context which the API will have via the API Platform http://API_GATEWAY/{api.gateway.context}/
api.gateway.context = "state-pension"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="QWytTe8XPy9nfzRXV0jSUhNLOACEIswGE3B27QuK61rSKGH7kMSQHP2bbSDqKxjf"

# Session configuration
# ~~~~~
application.session.httpOnly=false

application.session.secure=false

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=uk.gov.hmrc.statepension.MicroserviceGlobal

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
application.router=prod.Routes


# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and 
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule. 

controllers {
    # 300 is the default, you may need to change this according to your needs
    confidenceLevel = 200
    
    com.kenshoo.play.metrics.MetricsController = {
      needsAuth = false
      needsLogging = false
      needsAuditing = false
    }

    uk.gov.hmrc.statepension.controllers.sandbox.StatePensionController = {
        needsAuth = false
        needsLogging = true
        needsAuditing = false
    }

    uk.gov.hmrc.statepension.controllers.live.StatePensionController = {
        needsAuth = true
        needsLogging = true
        needsAuditing = false
        authParams = {
            account = "paye"
            pattern = """\/(.{0})ni\/([^\/]+)\/?.*"""
            privilegedAccess = "read:state-pension"
        }
    }

    uk.gov.hmrc.api.controllers.DocumentationController = {
        needsAuth = false
        needsLogging = false
        needsAuditing = false
    }
  
    uk.gov.hmrc.statepension.controllers.DocumentationController = {
        needsAuth = false
        needsLogging = false
        needsAuditing = false
    }
}


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
    name = ${appName}
    rateUnit = SECONDS
    durationUnit = SECONDS
    showSamples = true
    jvm = true
    enabled = true
}


# Microservice specific config

auditing {
    enabled=true
    traceRequests=true
    consumer {
        baseUri {
            host = localhost
            port = 8100
        }
    }
}

# API Access Configuration
api {
    access {
        type = PUBLIC
        whitelist.applicationIds = []
    }
    status = PUBLISHED
}

# Feature Switches

feature {
    connectToHOD = true # Whether to connect straight to the HOD or to nisp
}

# Rates
rates {
    revaluation {
        # Stored as decimal e.g. 1.01 would be an increase of 1%
        startingAmount = 1.00
        protectedPayment = 1.00
    }
    statePension {
        0 = 0
        1 = 4.45
        2 = 8.89
        3 = 13.34
        4 = 17.79
        5 = 22.24
        6 = 26.68
        7 = 31.13
        8 = 35.58
        9 = 40.02
        10 = 44.47
        11 = 48.92
        12 = 53.37
        13 = 57.81
        14 = 62.26
        15 = 66.71
        16 = 71.15
        17 = 75.6
        18 = 80.05
        19 = 84.5
        20 = 88.94
        21 = 93.39
        22 = 97.84
        23 = 102.28
        24 = 106.73
        25 = 111.18
        26 = 115.63
        27 = 120.07
        28 = 124.52
        29 = 128.97
        30 = 133.41
        31 = 137.86
        32 = 142.31
        33 = 146.76
        34 = 151.2
        35 = 155.65
    }
}

microservice {
    metrics {
        graphite {
            host = graphite
            port = 2003
            prefix = play.${appName}.
            enabled = false
        }
    }

    services {

        nisp {
            host = localhost
            port = 9310
        }

        auth {
            host= localhost
            port= 8500
        }

        service-locator {
            host= localhost
            port= 9602
            enabled = false
        }

        citizen-details {
            host=localhost
            port=9337
        }

        nps-hod {
            host=localhost
            port=9306
            originatoridkey=localkey
            originatoridvalue=localid
        }

    }
}
